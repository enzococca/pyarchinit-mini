#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Debug Parse Clusters - Test if parse_clusters() correctly extracts all 8 clusters
"""

from pyarchinit_mini.graphml_converter import dot_parser as dot

def debug_parse_clusters():
    """Test cluster parsing on the actual DOT file"""

    print("=" * 80)
    print("DEBUG PARSE_CLUSTERS()")
    print("=" * 80)
    print()

    # Read the DOT file generated by test_sfdp_export.py
    dot_path = "/Users/enzo/Desktop/dom_zu_lund_harris_matrix.dot"

    try:
        with open(dot_path, 'r', encoding='utf-8') as f:
            dot_content = f.read()

        print(f"DOT file: {dot_path}")
        print(f"File size: {len(dot_content)} bytes")
        print()

        # Count subgraphs manually
        import re
        subgraph_lines = [line for line in dot_content.split('\n') if 'subgraph cluster_datazione' in line]
        print(f"Subgraph lines found: {len(subgraph_lines)}")
        for line in subgraph_lines:
            print(f"  {line.strip()}")
        print()

        # Parse clusters
        print("Calling parse_clusters()...")
        clusters = dot.parse_clusters(dot_content)
        print()

        print(f"Clusters parsed: {len(clusters)}")
        print()

        if clusters:
            print("CLUSTER DETAILS:")
            print("-" * 80)
            for cluster_id in sorted(clusters.keys(), key=int):
                cluster = clusters[cluster_id]
                label = cluster['label']
                nodes = cluster['nodes']
                print(f"Cluster {cluster_id}: {label}")
                print(f"  Nodes: {len(nodes)}")
                if len(nodes) <= 5:
                    print(f"  Node list: {nodes}")
                else:
                    print(f"  First 5: {nodes[:5]}")
                    print(f"  Last 5: {nodes[-5:]}")
                print()
        else:
            print("⚠️  NO CLUSTERS PARSED!")
            print()
            print("Trying to manually parse first cluster...")

            # Debug: show first cluster structure
            lines = dot_content.split('\n')
            in_cluster = False
            cluster_lines = []
            for i, line in enumerate(lines):
                if 'subgraph cluster_datazione' in line:
                    in_cluster = True
                    print(f"Found cluster at line {i}: {line.strip()}")
                if in_cluster:
                    cluster_lines.append(line)
                    if line.strip() == '}' and len(cluster_lines) > 5:
                        # Likely end of cluster
                        print(f"Cluster ended at line {i}")
                        print("Cluster content:")
                        for cl in cluster_lines[:20]:
                            print(f"  {cl}")
                        break

        print("=" * 80)

    except FileNotFoundError:
        print(f"❌ File not found: {dot_path}")
        print()
        print("Please run test_sfdp_export.py first to generate the DOT file:")
        print("  .venv/bin/python test_sfdp_export.py")
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    debug_parse_clusters()